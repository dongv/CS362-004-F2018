        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest1.c
        -:    3: * village card: +2 actions and +1 card
        -:    4:	
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest3: cardtest3.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest3 -g  cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:#define TESTCARD "village"
        -:   24:
        1:   25:int main() {
        1:   26:    int newCards = 1;
        1:   27:	int newActions = 2;
        1:   28:	int discarded = 1;
        1:   29:    int shuffledCards = 0;
        1:   30:    int handpos = 0;
        1:   31:    int seed = 1000;
        1:   32:    int numPlayers = 2;
        1:   33:    int thisPlayer = 0;
        -:   34:	struct gameState G, testG;
        1:   35:	int k[10] = {adventurer, feast, village, minion, mine, cutpurse,
        -:   36:			sea_hag, tribute, smithy, council_room};
        -:   37:
        -:   38:	// initialize a game state and player cards
        1:   39:	initializeGame(numPlayers, k, seed, &G);
        -:   40:
        1:   41:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   42:
        -:   43:	// ----------- TEST 1: draw +1 card and +2 actions --------------
        1:   44:	printf("TEST 1: +1 card, +2 actions\n");
        -:   45:
        -:   46:	// copy the game state to a test case
        1:   47:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   48:
        1:   49:	villageFunction(thisPlayer, &testG, handpos);
        -:   50:
        1:   51:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   52:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   53:	printf("action count = %d, expected = %d\n", testG.numActions, G.numActions + newActions);	
        1:   54:	assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        1:   55:	assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   56:	assert(testG.numActions == G.numActions + newActions);
        -:   57:
        1:   58:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   59:
        -:   60:
        1:   61:	return 0;
        -:   62:}
        -:   63:
        -:   64:
