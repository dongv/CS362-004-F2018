        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest1.c
        -:    3: * smithy: +3 card
        -:    4:	
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest1: cardtest1.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest1 -g  cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:#define TESTCARD "smithy"
        -:   24:
        1:   25:int main() {
        1:   26:    int newCards = 3;
        1:   27:    int discarded = 1;
        1:   28:    int shuffledCards = 0;
        1:   29:    int handpos = 0;
        1:   30:    int seed = 1000;
        1:   31:    int numPlayers = 2;
        1:   32:    int thisPlayer = 0;
        -:   33:	struct gameState G, testG;
        1:   34:	int k[10] = {adventurer, feast, village, minion, mine, cutpurse,
        -:   35:			sea_hag, tribute, smithy, council_room};
        -:   36:
        -:   37:	// initialize a game state and player cards
        1:   38:	initializeGame(numPlayers, k, seed, &G);
        -:   39:
        1:   40:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   41:
        -:   42:	// ----------- TEST 1: draw +3 cards --------------
        1:   43:	printf("TEST 1: +3 cards\n");
        -:   44:
        -:   45:	// copy the game state to a test case
        1:   46:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   47:
        1:   48:	smithyFunction(thisPlayer, &testG, handpos);
        -:   49:
        1:   50:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   51:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   52:	assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
        1:   53:	assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
        -:   54:
        1:   55:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   56:
        -:   57:
        1:   58:	return 0;
        -:   59:}
        -:   60:
        -:   61:
