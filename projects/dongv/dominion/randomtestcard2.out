----------------- Testing Card: smithy ----------------

 >>>>> SUCCESS: Testing complete smithy <<<<<

File 'randomtestcard2.c'
Lines executed:100.00% of 21
Creating 'randomtestcard2.c.gcov'

        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * randomtestcard2.c
        -:    3: * smithy: +3 card
        -:    4:	
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * randomtestcard2: randomtestcard2.c dominion.o rngs.o
        -:   11: *      gcc -o randomtestcard2 -g  randomtestcard2.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:#define TESTCARD "smithy"
        -:   24:
        1:   25:int main(){
        -:   26:    int i;
        1:   27:    int newCards = 3;
        1:   28:    int discarded = 1;
        1:   29:    int shuffledCards = 0;
        -:   30:   
        1:   31:    int k[10] = {adventurer, feast, village, minion, mine, cutpurse,
        -:   32:		sea_hag, tribute, smithy, council_room};
        -:   33:
        1:   34:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   35:
  3200001:   36:for (i = 0; i < 3200000; i++){
  3200000:   37:    int seed = 1000;                //random seed 1000
  3200000:   38:    int numPlayers = rand()%3+2;    //number of players could be 2-4
  3200000:   39:    int handpos = rand()%20;         //randomize handpos, player's intial hand is 5
        -:   40:	
        -:   41:    struct gameState G, testG;
        -:   42:	
        -:   43:    // initialize a game state and player cards
  3200000:   44:    initializeGame(numPlayers, k, seed, &G);// copy the game state to a test case
  3200000:   45:    int thisPlayer = whoseTurn(&testG);	    //current player
  3200000:   46:    testG.handCount[thisPlayer]=rand()%20;;
  3200000:   47:    testG.deckCount[thisPlayer]=rand()%500;;
  3200000:   48:    testG.numActions=rand()%20;
  3200000:   49:    memcpy(&testG, &G, sizeof(struct gameState));
  3200000:   50:    rf_smithy(&testG, handpos);             //run refactored smithy card instead of cardeffect
        -:   51:    //cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   52:    //printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        -:   53:    //printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        -:   54:    //printf("number of players = %d, hand position = %d\n", numPlayers, handpos);
  3200000:   55:    assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
  3200000:   56:    assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
        -:   57:}
        -:   58:    
        1:   59:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        1:   60:return 0;
        -:   61:}
        -:   62:
        -:   63:
